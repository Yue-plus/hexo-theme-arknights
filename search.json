[{"title":"加密文档（密码：yueplus）","url":"/2020/12/01/encrypt/","content":"\n      \n        a420dc6f9769c923c8d21655eba4200700bb4a5df5f4dd1c8b333a9154973f639bb7f7e1ff4ac603436c8c0627c7a8ee983bf1ee20c7e61ebde6909fd18cb9a567fc96621237e2c5b148e45c284b2cf337c6e8591d8d9bd77a4835f26472b307e4bc10475fe9b61868406783ecd541c6095d9e50f8404841c9ebe942597ee26b6958fe687b160a14f9c603a71e167c78c0ef2c3aa8943d37951c027eafa9f1ea03daa488fc42afd692d07c174350fbe588cf21db55f232d5cf17553d2e80c8a705d3310e0ad9574c36a08666444dddf90e3f9e8aa93a04ad779c71f9e1f8ef579c2e0664db3a9666e73826682ea147427199e82db3b7674e02e1df87caf4dfeb3234451690b3c7f671c1cec46e048b6033815dbcb9f503ad4c053827eb1c49d4370741b0d785ef30ae126e84d0f2c038c116597e9b499b7d55889bd791927abe688658af7166b99670c3eea86da46984f05febf042d22b58914c62a1305f7cff4ee627341cfdffe94a7b30b16007c311c449b9c902521912e4b5aa7ed327d16e03f37ed047b4200316b40ac85644bb7015c5742780d7c8d0a7217d99c1fc15e7e1917236d0c96ee35506a5d0d4a0a89e6d565b6711a296a12ccc07621d00b52a42fc19537ea5076524b668a7b83c6ea7da28ee860f5b06b5c6c625fc83d45ebaa7026852f6b6f0426573dfb0fa57c21c36b944bbaae2b677c79abb124e68d6687e4baf2c801d99b3f0f7c54831fe6e4460047ac3bb88e595235f0fd85fea88a0f13a3b2c5954a9e9eb8246601ef83de7ff96202bccdd08ceaebb5322f1b5adb9bb28ab75972c932bd7b4cf45931f4acb51d4739e55af5915c272e926b58342524e41f212af9d71430dda8c4ba228500526e97c95bf8c0926ff32279e8ee68439256fe10e75d0bb5d48807ff81a8f31c5f5fc4c6130adf1f2540a0534d58eb205c0f3ad30e9d81ba98cc847e3a8544fe3c0d8e42d8c771a48b0c9747e15c3a11c37a1a4b753abc2ad8424728b6f0aa36b3c71d981c2be06ca4ff81a9a6d3353d0\n      \n      \n        \n          \n          \n            请输入与 Rhodes Island™ 取得弱神经连接时的口令：\n          \n        \n        \n      \n    \n    ","categories":["Example"],"tags":["encrypt"]},{"title":"kotlin 基本类型","url":"/2020/07/14/kotlin-basic-types/","content":"基本类型在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。\n\n\n\n原文地址，此处仅作展示！\n\n基本类型在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。\n数字Kotlin 提供了一组表示数字的内置类型。对于整数，有四种不同大小的类型，因此值的范围也不同。\n\n\n\n类型\n大小（比特数）\n最小值\n最大值\n\n\n\nByte\n8\n-128\n127\n\n\nShort\n16\n-32768\n32767\n\n\nInt\n32\n-2,147,483,648 (-231)\n2,147,483,647 (231 - 1)\n\n\nLong\n64\n-9,223,372,036,854,775,808 (-263)\n9,223,372,036,854,775,807 (263 - 1)\n\n\n所有以未超出 Int 最大值的整型值初始化的变量都会推断为 Int 类型。如果初始值超过了其最大值，那么推断为 Long 类型。如需显式指定 Long 型值，请在该值后追加 L 后缀。\nval one = 1 // Intval threeBillion = 3000000000 // Longval oneLong = 1L // Longval oneByte: Byte = 1\n\n对于浮点数，Kotlin 提供了 Float 与 Double 类型。根据 IEEE 754 标准，两种浮点类型的十进制位数（即可以存储多少位十进制数）不同。Float 反映了 IEEE 754 单精度，而 Double 提供了双精度。\n\n\n\n类型\n大小（比特数）\n有效数字比特数\n指数比特数\n十进制位数\n\n\n\nFloat\n32\n24\n8\n6-7\n\n\nDouble\n64\n53\n11\n15-16\n\n\n对于以小数初始化的变量，编译器会推断为 Double 类型。如需将一个值显式指定为 Float 类型，请添加 f 或 F 后缀。如果这样的值包含多于 6～7 位十进制数，那么会将其舍入。\nval pi = 3.14 // Doubleval e = 2.7182818284 // Doubleval eFloat = 2.7182818284f // Float，实际值为 2.7182817\n\n请注意，与一些其他语言不同，Kotlin 中的数字没有隐式拓宽转换。例如，具有 Double 参数的函数只能对 Double 值调用，而不能对 Float、Int 或者其他数字值调用。\nfun main() &#123;    fun printDouble(d: Double) &#123; print(d) &#125;    val i = 1        val d = 1.1    val f = 1.1f     printDouble(d)//    printDouble(i) // 错误：类型不匹配//    printDouble(f) // 错误：类型不匹配&#125;\n\n如需将数值转换为不同的类型，请使用显示转换。\n字面常量数值常量字面值有以下几种:\n\n十进制: 123\nLong 类型用大写 L 标记: 123L\n\n\n十六进制: 0x0F\n二进制: 0b00001011\n\n注意: 不支持八进制\nKotlin 同样支持浮点数的常规表示方法:\n\n默认 double：123.5、123.5e10\nFloat 用 f 或者 F 标记: 123.5f\n\n数字字面值中的下划线（自 1.1 起）你可以使用下划线使数字常量更易读：\nval oneMillion = 1_000_000val creditCardNumber = 1234_5678_9012_3456Lval socialSecurityNumber = 999_99_9999Lval hexBytes = 0xFF_EC_DE_5Eval bytes = 0b11010010_01101001_10010100_10010010\n\n表示方式在 Java 平台数字是物理存储为 JVM 的原生类型，除非我们需要一个可空的引用（如 Int?）或泛型。后者情况下会把数字装箱。\n注意数字装箱不一定保留同一性:\nfun main() &#123;    val a: Int = 100    val boxedA: Int? = a    val anotherBoxedA: Int? = a        val b: Int = 10000    val boxedB: Int? = b    val anotherBoxedB: Int? = b        println(boxedA === anotherBoxedA) // true    println(boxedB === anotherBoxedB) // false&#125;\n\n另一方面，它保留了相等性:\nfun main() &#123;    val a: Int = 10000    println(a == a) // 输出“true”    val boxedA: Int? = a    val anotherBoxedA: Int? = a    println(boxedA == anotherBoxedA) // 输出“true”&#125;\n\n显式转换由于不同的表示方式，较小类型并不是较大类型的子类型。如果它们是的话，就会出现下述问题：\n// 假想的代码，实际上并不能编译：val a: Int? = 1 // 一个装箱的 Int (java.lang.Integer)val b: Long? = a // 隐式转换产生一个装箱的 Long (java.lang.Long)print(b == a) // 惊！这将输出“false”鉴于 Long 的 equals() 会检测另一个是否也为 Long\n\n所以相等性会在所有地方悄无声息地失去，更别说同一性了。\n因此较小的类型不能隐式转换为较大的类型。这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。\nfun main() &#123;    val b: Byte = 1 // OK, 字面值是静态检测的    val i: Int = b // 错误&#125;\n\n我们可以显式转换来拓宽数字\nfun main() &#123;    val b: Byte = 1    val i: Int = b.toInt() // OK：显式拓宽    print(i)&#125;\n\n每个数字类型支持如下的转换:\n\ntoByte(): Byte\ntoShort(): Short\ntoInt(): Int\ntoLong(): Long\ntoFloat(): Float\ntoDouble(): Double\ntoChar(): Char\n\n缺乏隐式类型转换很少会引起注意，因为类型会从上下文推断出来，而算术运算会有重载做适当转换，例如：\nval l = 1L + 3 // Long + Int =&gt; Long\n\n运算Kotlin支持数字运算的标准集（+ - * / %），运算被定义为相应的类成员（但编译器会将函数调用优化为相应的指令）。参见运算符重载。\n整数除法请注意，整数间的除法总是返回整数。会丢弃任何小数部分。例如：\nfun main() &#123;    val x = 5 / 2    //println(x == 2.5) // ERROR: Operator &#x27;==&#x27; cannot be applied to &#x27;Int&#x27; and &#x27;Double&#x27;    println(x == 2)&#125;\n\n对于任何两个整数类型之间的除法来说都是如此。\nfun main() &#123;    val x = 5L / 2    println(x == 2L)&#125;\n\n如需返回浮点类型，请将其中的一个参数显式转换为浮点类型。\nfun main() &#123;    val x = 5 / 2.toDouble()    println(x == 2.5)&#125;\n\n位运算对于位运算，没有特殊字符来表示，而只可用中缀方式调用具名函数，例如:\nval x = (1 shl 2) and 0x000FF000\n\n这是完整的位运算列表（只用于 Int 与 Long）：\n\nshl(bits) – 有符号左移\nshr(bits) – 有符号右移\nushr(bits) – 无符号右移\nand(bits) – 位与\nor(bits) – 位或\nxor(bits) – 位异或\ninv() – 位非\n\n浮点数比较本节讨论的浮点数操作如下：\n\n相等性检测：a == b 与 a != b\n比较操作符：a &lt; b、 a &gt; b、 a &lt;= b、 a &gt;= b\n区间实例以及区间检测：a..b、 x in a..b、 x !in a..b\n\n当其中的操作数 a 与 b 都是静态已知的 Float 或 Double 或者它们对应的可空类型（声明为该类型，或者推断为该类型，或者智能类型转换的结果是该类型），两数字所形成的操作或者区间遵循 IEEE 754 浮点运算标准。\n然而，为了支持泛型场景并提供全序支持，当这些操作数并非静态类型为浮点数（例如是 Any、 Comparable&lt;……&gt;、 类型参数）时，这些操作使用为 Float 与 Double 实现的不符合标准的 equals 与 compareTo，这会出现：\n\n认为 NaN 与其自身相等\n认为 NaN 比包括正无穷大（POSITIVE_INFINITY）在内的任何其他元素都大\n认为 -0.0 小于 0.0\n\n字符字符用 Char 类型表示。它们不能直接当作数字\nfun check(c: Char) &#123;    if (c == 1) &#123; // 错误：类型不兼容        // ……    &#125;&#125;\n\n字符字面值用单引号括起来: &#39;1&#39;。特殊字符可以用反斜杠转义。支持这几个转义序列：\\t、 \\b、\\n、\\r、\\&#39;、\\&quot;、\\\\ 与 \\$。编码其他字符要用 Unicode 转义序列语法：&#39;\\uFF00&#39;。\n我们可以显式把字符转换为 Int 数字：\nfun decimalDigitValue(c: Char): Int &#123;    if (c !in &#x27;0&#x27;..&#x27;9&#x27;)        throw IllegalArgumentException(&quot;Out of range&quot;)    return c.toInt() - &#x27;0&#x27;.toInt() // 显式转换为数字&#125;\n\n当需要可空引用时，像数字、字符会被装箱。装箱操作不会保留同一性。\n布尔布尔用 Boolean 类型表示，它有两个值：true{: .keyword } 与 false{: .keyword }。\n若需要可空引用布尔会被装箱。\n内置的布尔运算有：\n\n|| – 短路逻辑或\n&amp;&amp; – 短路逻辑与\n! - 逻辑非\n\n数组数组在 Kotlin 中使用 Array 类来表示，它定义了 get 与 set 函数（按照运算符重载约定这会转变为 []）以及 size 属性，以及一些其他有用的成员函数：\nclass Array&lt;T&gt; private constructor() &#123;    val size: Int    operator fun get(index: Int): T    operator fun set(index: Int, value: T): Unit    operator fun iterator(): Iterator&lt;T&gt;    // ……&#125;\n\n我们可以使用库函数 arrayOf() 来创建一个数组并传递元素值给它，这样 arrayOf(1, 2, 3) 创建了 array [1, 2, 3]。或者，库函数 arrayOfNulls() 可以用于创建一个指定大小的、所有元素都为空的数组。\n另一个选项是用接受数组大小以及一个函数参数的 Array 构造函数，用作参数的函数能够返回给定索引的每个元素初始值：\nfun main() &#123;    // 创建一个 Array&lt;String&gt; 初始化为 [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]    val asc = Array(5) &#123; i -&gt; (i * i).toString() &#125;    asc.forEach &#123; println(it) &#125;&#125;\n\n如上所述，[] 运算符代表调用成员函数 get() 与 set()。\nKotlin 中数组是不型变的（invariant）。这意味着 Kotlin 不让我们把 Array&lt;String&gt;赋值给 Array&lt;Any&gt;，以防止可能的运行时失败（但是你可以使用 Array&lt;out Any&gt;,参见类型投影）。\n原生类型数组Kotlin 也有无装箱开销的专门的类来表示原生类型数组: ByteArray、ShortArray、IntArray 等等。这些类与 Array 并没有继承关系，但是它们有同样的方法属性集。它们也都有相应的工厂方法:\nval x: IntArray = intArrayOf(1, 2, 3)x[0] = x[1] + x[2]\n\n// 大小为 5、值为 [0, 0, 0, 0, 0] 的整型数组val arr = IntArray(5)// 例如：用常量初始化数组中的值// 大小为 5、值为 [42, 42, 42, 42, 42] 的整型数组val arr = IntArray(5) &#123; 42 &#125;// 例如：使用 lambda 表达式初始化数组中的值// 大小为 5、值为 [0, 1, 2, 3, 4] 的整型数组（值初始化为其索引值）var arr = IntArray(5) &#123; it * 1 &#125; \n\n\n无符号整型\n无符号类型自 Kotlin 1.3 起才可用，并且目前是实验性的。详见下文{:.note}\n\nKotlin 为无符号整数引入了以下类型：\n\nkotlin.UByte: 无符号 8 比特整数，范围是 0 到 255\nkotlin.UShort: 无符号 16 比特整数，范围是 0 到 65535\nkotlin.UInt: 无符号 32 比特整数，范围是 0 到 2^32 - 1\nkotlin.ULong: 无符号 64 比特整数，范围是 0 到 2^64 - 1\n\n无符号类型支持其对应有符号类型的大多数操作。\n\n请注意，将类型从无符号类型更改为对应的有符号类型（反之亦然）是二进制不兼容变更{:.note}\n\n无符号类型是使用另一个实验性特性（即内联类）实现的。\n特化的类与原生类型相同，每个无符号类型都有相应的为该类型特化的表示数组的类型：\n\nkotlin.UByteArray: 无符号字节数组\nkotlin.UShortArray: 无符号短整型数组\nkotlin.UIntArray: 无符号整型数组\nkotlin.ULongArray: 无符号长整型数组\n\n与有符号整型数组一样，它们提供了类似于 Array 类的 API 而没有装箱开销。\n此外，区间与数列也支持 UInt 与 ULong（通过这些类 kotlin.ranges.UIntRange、 kotlin.ranges.UIntProgression、 kotlin.ranges.ULongRange、 kotlin.ranges.ULongProgression）\n字面值为使无符号整型更易于使用，Kotlin 提供了用后缀标记整型字面值来表示指定无符号类型（类似于 Float&#x2F;Long）：\n\n后缀 u 与 U 将字面值标记为无符号。确切类型会根据预期类型确定。如果没有提供预期的类型，会根据字面值大小选择 UInt 或者 ULong\n\nval b: UByte = 1u  // UByte，已提供预期类型val s: UShort = 1u // UShort，已提供预期类型val l: ULong = 1u  // ULong，已提供预期类型val a1 = 42u // UInt：未提供预期类型，常量适于 UIntval a2 = 0xFFFF_FFFF_FFFFu // ULong：未提供预期类型，常量不适于 UInt\n\n\n后缀 uL 与 UL 显式将字面值标记为无符号长整型。\n\nval a = 1UL // ULong，即使未提供预期类型并且常量适于 UInt\n\n无符号整型的实验性状态无符号类型的设计是实验性的，这意味着这个特性改进很快并且没有给出兼容性保证。当在 Kotlin 1.3+ 中使用无符号算术时，会报出警告表明这个特性是实验性的。如需移除警告，必须选择加入（opt-in）无符号类型的实验性使用。\n选择加入无符号整型有两种可行的方式：将 API 标记为实验性的，或者无需标记。\n\n如需传播实验性，请以 @ExperimentalUnsignedTypes 标注使用了无符号整型的声明。\n如需选择加入而不传播实验性，要么使用 @OptIn(ExperimentalUnsignedTypes::class) 注解标注声明，要么将 -Xopt-in=kotlin.ExperimentalUnsignedTypes 传给编译器。\n\n你的客户是否必须选择使用你的 API 取决于你，不过请记住，无符号整型是一个实验性特性，因此使用它们的 API 可能会因语言的变更而发生突然破坏。\n技术细节也参见实验性 API KEEP。\n深入探讨关于技术细节与深入探讨请参见无符号类型的语言提案。\n字符串字符串用 String 类型表示。字符串是不可变的。字符串的元素——字符可以使用索引运算符访问: s[i]。可以用 for{: .keyword } 循环迭代字符串:\nfun main() &#123;    val str = &quot;abcd&quot;    for (c in str) &#123;        println(c)    &#125;&#125;\n\n可以用 + 操作符连接字符串。这也适用于连接字符串与其他类型的值，只要表达式中的第一个元素是字符串：\nfun main() &#123;val s = &quot;abc&quot; + 1println(s + &quot;def&quot;)&#125;\n\n请注意，在大多数情况下，优先使用字符串模板或原始字符串而不是字符串连接。\n字符串字面值Kotlin 有两种类型的字符串字面值: 转义字符串可以有转义字符，以及原始字符串可以包含换行以及任意文本。以下是转义字符串的一个示例:\nval s = &quot;Hello, world!\\n&quot;\n\n转义采用传统的反斜杠方式。参见上面的 字符 查看支持的转义序列。\n原始字符串 使用三个引号（&quot;&quot;&quot;）分界符括起来，内部没有转义并且可以包含换行以及任何其他字符:\nval text = &quot;&quot;&quot;    for (c in &quot;foo&quot;)        print(c)&quot;&quot;&quot;\n\n你可以通过 trimMargin() 函数去除前导空格：\nval text = &quot;&quot;&quot;    |Tell me and I forget.    |Teach me and I remember.    |Involve me and I learn.    |(Benjamin Franklin)    &quot;&quot;&quot;.trimMargin()\n\n默认 | 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 trimMargin(&quot;&gt;&quot;)。\n字符串模板字符串字面值可以包含模板表达式 ，即一些小段代码，会求值并把结果合并到字符串中。模板表达式以美元符（$）开头，由一个简单的名字构成:\nfun main() &#123;    val i = 10    println(&quot;i = $i&quot;) // 输出“i = 10”&#125;\n\n或者用花括号括起来的任意表达式:\nfun main() &#123;    val s = &quot;abc&quot;    println(&quot;$s.length is $&#123;s.length&#125;&quot;) // 输出“abc.length is 3”&#125;\n\n原始字符串与转义字符串内部都支持模板。如果你需要在原始字符串中表示字面值 $ 字符（它不支持反斜杠转义），你可以用下列语法：\nval price = &quot;&quot;&quot;$&#123;&#x27;$&#x27;&#125;9.99&quot;&quot;&quot;\n"},{"title":"Hello World !","url":"/2020/04/15/helloworld/","content":"JavaScriptconsole.log(&quot;Hello World&quot;);\n这儿有一些代码示例~\n\n\nApache# rewrite`s rules for wordpress pretty urlLoadModule rewrite_module  modules/mod_rewrite.soRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule . index.php [NC,L]ExpiresActive OnExpiresByType application/x-javascript  &quot;access plus 1 days&quot;Order Deny,AllowAllow from All&lt;Location /maps/&gt;  RewriteMap map txt:map.txt  RewriteMap lower int:tolower  RewriteCond %&#123;REQUEST_URI&#125; ^/([^/.]+)\\.html$ [NC]  RewriteCond $&#123;map:$&#123;lower:%1&#125;|NOT_FOUND&#125; !NOT_FOUND  RewriteRule .? /index.php?q=$&#123;map:$&#123;lower:%1&#125;&#125; [NC,L]&lt;/Location&gt;\n\nBash#!/bin/bash###### CONFIGACCEPTED_HOSTS=&quot;/root/.hag_accepted.conf&quot;BE_VERBOSE=falseif [ &quot;$UID&quot; -ne 0 ]then echo &quot;Superuser rights required&quot; exit 2figenApacheConf()&#123; echo -e &quot;# Host $&#123;HOME_DIR&#125;$1/$2 :&quot;&#125;echo &#x27;&quot;quoted&quot;&#x27; | tr -d \\&quot; &gt; text.txt\n\nCoffeeScriptgrade = (student, period=(if b? then 7 else 6)) -&gt;  if student.excellentWork    &quot;A+&quot;  else if student.okayStuff    if student.triedHard then &quot;B&quot; else &quot;B-&quot;  else    &quot;C&quot;class Animal extends Being  constructor: (@name) -&gt;  move: (meters) -&gt;    alert @name + &quot; moved #&#123;meters&#125;m.&quot;\n\nC++#include &lt;iostream&gt;int main(int argc, char *argv[]) &#123;  /* An annoying &quot;Hello World&quot; example */  for (auto i = 0; i &lt; 0xFFFF; i++)    cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl;  char c = &#x27;\\n&#x27;;  unordered_map &lt;string, vector&lt;string&gt; &gt; m;  m[&quot;key&quot;] = &quot;\\\\\\\\&quot;; // this is an error  return -2e3 + 12l;&#125;\n\nC#using System.IO.Compression;#pragma warning disable 414, 3021namespace MyApplication&#123;    [Obsolete(&quot;...&quot;)]    class Program : IInterface    &#123;        public static List&lt;int&gt; JustDoIt(int count)        &#123;            Console.WriteLine($&quot;Hello &#123;Name&#125;!&quot;);            return new List&lt;int&gt;(new int[] &#123; 1, 2, 3 &#125;)        &#125;    &#125;&#125;\n\nCSS@font-face &#123;  font-family: Chunkfive; src: url(&#x27;Chunkfive.otf&#x27;);&#125;body, .usertext &#123;  color: #F0F0F0; background: #600;  font-family: Chunkfive, sans;  --heading-1: 30px/32px Helvetica, sans-serif;&#125;@import url(print.css);@media print &#123;  a[href^=http]::after &#123;    content: attr(href)  &#125;&#125;\n\ndiffIndex: languages/ini.js===================================================================--- languages/ini.js    (revision 199)+++ languages/ini.js    (revision 200)@@ -1,8 +1,7 @@ hljs.LANGUAGES.ini = &#123;   case_insensitive: true,-  defaultMode:-  &#123;+  defaultMode: &#123;     contains: [&#x27;comment&#x27;, &#x27;title&#x27;, &#x27;setting&#x27;],     illegal: &#x27;[^\\\\s]&#x27;   &#125;,*** /path/to/original timestamp--- /path/to/new      timestamp****************** 1,3 ****--- 1,9 ----+ This is an important+ notice! It should+ therefore be located at+ the beginning of this+ document!! compress the size of the! changes.  It is important to spell\n\n\n使用主题：Atom One Dark Reasonable查看更多示例：Highlight.js demo\n\n","categories":["Example"],"tags":["code"]},{"title":"这是一篇拥有很长目录的文章","url":"/2020/04/12/longindex/","content":"这儿是长目录示例~\n\n\n\n如果在 hexo serve --debug 下，会看到这篇文章无法全部渲染。这是由热重载插件 hexo-browsersync 导致的，不会影响发布。\n\n试试侧边栏的目录吧~ (｡･∀･)ﾉﾞ一级标题 (&#x2F;ω＼*)……… (&#x2F;ω•＼*)━━━━━━┒┏┓┏┓┏┓ I┗┛┗┛┗┛┃＼👴／┏┓┏┓┏┓┃ /┗┛┗┛┗┛┃ノ)┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┗┛┗┛┗┛┃┏┓┏┓┏┓┃┃┃┃┃┃┃┃┻┻┻┻┻┻┻ .. ? ?   ? ? ?  ? ? .. ?\n长一些的一级标题 （づ￣3￣）づ╭❤～长一些的二级标题 ヽ(￣ω￣(￣ω￣〃)ゝ)很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的一级标题很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的二级标题一级标题卡耐基说过一句富有哲理的话，我们若已接受最坏的，就再没有什么损失。\n二级标题这似乎解答了我的疑惑。\n三级标题那么，这一大段文章，到底应该如何实现。\n四级标题总结的来说，鲁巴金曾经说过，读书是在别人思想的帮助下，建立起自己的思想。\n五级标题这启发了我，所谓这一大段文章，关键是这一大段文章需要如何写。\n六级标题要想清楚，\n六级标题这一大段文章\n六级标题，到底是一种怎么样的存在。\n五级标题一般来说，\n六级标题就我个人来说，\n六级标题这一大段文章对我的意义，\n六级标题不能不说非常重大\n六级标题。总结的来说，\n六级标题这一大段文章，\n六级标题到底应该如何实现\n六级标题。问题的关键究竟为何？\n六级标题本人也是经过了深思熟虑，\n六级标题在每个日日夜夜思考这个问题\n三级标题。这一大段文章的发生，\n六级标题到底需要如何做到，\n六级标题不这一大段文章的发生，\n六级标题又会如何产生\n六级标题。从这个角度来看，\n六级标题这一大段文章的发生，\n六级标题到底需要如何做到，\n六级标题不这一大段文章的发生，\n六级标题又会如何产生\n六级标题。我们不得不面对一个非常尴尬的事实，\n六级标题那就是，\n六级标题既然如何，\n六级标题这一大段文章，\n六级标题发生了会如何，\n六级标题不发生又会如何。\n六级标题对我个人而言，\n六级标题这一大段文章不仅仅是一个重大的事件，\n六级标题还可能会改变我的人生。\n六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题六级标题","categories":["Example"],"tags":["long"]},{"title":"这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章","url":"/2020/04/11/longtext/","content":"这儿是大段文本示例~\n\n\n\n如果在 hexo serve --debug 下运行，会看到这篇文章无法全部渲染。这是由热重载插件 hexo-browsersync 导致的，不会影响发布。\n\n这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章德国曾经提到过，只有在人群中间，才能认识自己。我希望诸位也能好好地体会这句话。 既然如此， 既然如何， 而这些并不是完全重要，更加重要的问题是， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 塞涅卡曾经说过，生命如同寓言，其价值不在与长短，而在与内容。这似乎解答了我的疑惑。 既然如此， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章因何而发生？ 杰纳勒尔·乔治·S·巴顿曾经提到过，接受挑战，就可以享受胜利的喜悦。带着这句话，我们还要更加慎重的审视这个问题： 从这个角度来看， 带着这些问题，我们来审视一下这一大段文章。 卢梭说过一句富有哲理的话，浪费时间是一桩大罪过。这似乎解答了我的疑惑。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。\n一般来讲，我们都必须务必慎重的考虑考虑。 我们不得不面对一个非常尴尬的事实，那就是， 这样看来， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 一般来讲，我们都必须务必慎重的考虑考虑。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这一大段文章，发生了会如何，不发生又会如何。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 既然如何， 从这个角度来看， 从这个角度来看， 我认为， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 那么。\n这样看来， 经过上述讨论， 而这些并不是完全重要，更加重要的问题是， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 德谟克利特曾经说过，节制使快乐增加并使享受加强。这不禁令我深思。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 经过上述讨论， 塞涅卡说过一句富有哲理的话，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。我希望诸位也能好好地体会这句话。 我认为， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 在这种困难的抉择下，本人思来想去，寝食难安。 这一大段文章因何而发生？ 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 我们不得不面对一个非常尴尬的事实，那就是， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 贝多芬曾经说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。我希望诸位也能好好地体会这句话。 这一大段文章因何而发生？ 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 屠格涅夫在不经意间这样说过，你想成为幸福的人吗？但愿你首先学会吃得起苦。这不禁令我深思。 一般来讲，我们都必须务必慎重的考虑考虑。 那么， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 问题的关键究竟为何。\n王阳明说过一句富有哲理的话，故立志者，为学之心也；为学者，立志之事也。这句话语虽然很短，但令我浮想联翩。 而这些并不是完全重要，更加重要的问题是， 歌德曾经说过，没有人事先了解自己到底有多大的力量，直到他试过以后才知道。这似乎解答了我的疑惑。 这一大段文章因何而发生？ 要想清楚，这一大段文章，到底是一种怎么样的存在。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 既然如何， 而这些并不是完全重要，更加重要的问题是， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 我们都知道，只要有意义，那么就必须慎重考虑。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 既然如何， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 歌德曾经说过，决定一个人的一生，以及整个命运的，只是一瞬之间。这句话语虽然很短，但令我浮想联翩。 我们都知道，只要有意义，那么就必须慎重考虑。 要想清楚，这一大段文章，到底是一种怎么样的存在。 每个人都不得不面对这些问题。 在面对这种问题时， 这样看来， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 所谓这一大段文章，关键是这一大段文章需要如何写。\n这一大段文章，发生了会如何，不发生又会如何。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 而这些并不是完全重要，更加重要的问题是， 这一大段文章，到底应该如何实现。 既然如何， 一般来说， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 问题的关键究竟为何？ 那么， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这样看来， 我们都知道，只要有意义，那么就必须慎重考虑。 莎士比亚在不经意间这样说过，抛弃时间的人，时间也抛弃他。这似乎解答了我的疑惑。 而这些并不是完全重要，更加重要的问题是， 亚伯拉罕·林肯曾经说过，我这个人走得很慢，但是我从不后退。我希望诸位也能好好地体会这句话。 我们不得不面对一个非常尴尬的事实，那就是， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 从这个角度来看， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 要想清楚，这一大段文章，到底是一种怎么样的存在。 一般来讲，我们都必须务必慎重的考虑考虑。 歌德曾经提到过，读一本好书，就如同和一个高尚的人在交谈。我希望诸位也能好好地体会这句话。 每个人都不得不面对这些问题。 在面对这种问题时， 总结的来说， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 我们都知道，只要有意义，那么就必须慎重考虑。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 而这些并不是完全重要，更加重要的问题是。\n而这些并不是完全重要，更加重要的问题是， 这样看来， 米歇潘说过一句富有哲理的话，生命是一条艰险的峡谷，只有勇敢的人才能通过。带着这句话，我们还要更加慎重的审视这个问题： 苏轼说过一句富有哲理的话，古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这启发了我， 这样看来， 我们不得不面对一个非常尴尬的事实，那就是， 既然如此， 经过上述讨论， 雷锋在不经意间这样说过，自己活着，就是为了使别人过得更美好。这似乎解答了我的疑惑。 这样看来， 这一大段文章，发生了会如何，不发生又会如何。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。\n对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 带着这些问题，我们来审视一下这一大段文章。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 伏尔泰曾经提到过，不经巨大的困难，不会有伟大的事业。我希望诸位也能好好地体会这句话。 这一大段文章，发生了会如何，不发生又会如何。 每个人都不得不面对这些问题。 在面对这种问题时， 文森特·皮尔曾经说过，改变你的想法，你就改变了自己的世界。这不禁令我深思。 总结的来说， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章，到底应该如何实现。 总结的来说， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 我们不得不面对一个非常尴尬的事实，那就是， 带着这些问题，我们来审视一下这一大段文章。 鲁巴金说过一句富有哲理的话，读书是在别人思想的帮助下，建立起自己的思想。这似乎解答了我的疑惑。 既然如此， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 杰纳勒尔·乔治·S·巴顿在不经意间这样说过，接受挑战，就可以享受胜利的喜悦。这句话语虽然很短，但令我浮想联翩。 这一大段文章，到底应该如何实现。 这一大段文章因何而发生？ 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章，到底应该如何实现。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 所谓这一大段文章，关键是这一大段文章需要如何写。\n要想清楚，这一大段文章，到底是一种怎么样的存在。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 问题的关键究竟为何？ 从这个角度来看， 问题的关键究竟为何？ 一般来讲，我们都必须务必慎重的考虑考虑。 所谓这一大段文章，关键是这一大段文章需要如何写。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 塞涅卡曾经说过，生命如同寓言，其价值不在与长短，而在与内容。这不禁令我深思。 我们不得不面对一个非常尴尬的事实，那就是， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这样看来， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来说， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 我们都知道，只要有意义，那么就必须慎重考虑。 那么， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 一般来讲，我们都必须务必慎重的考虑考虑。 而这些并不是完全重要，更加重要的问题是， 老子说过一句富有哲理的话，知人者智，自知者明。胜人者有力，自胜者强。这启发了我， 一般来说， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。\n文森特·皮尔曾经提到过，改变你的想法，你就改变了自己的世界。我希望诸位也能好好地体会这句话。 那么， 在这种困难的抉择下，本人思来想去，寝食难安。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来讲，我们都必须务必慎重的考虑考虑。 乌申斯基说过一句富有哲理的话，学习是劳动，是充满思想的劳动。这启发了我， 卢梭曾经提到过，浪费时间是一桩大罪过。这不禁令我深思。 博曾经提到过，一次失败，只是证明我们成功的决心还够坚强。 维这启发了我， 我认为， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 要想清楚，这一大段文章，到底是一种怎么样的存在。 这样看来， 我认为， 我们都知道，只要有意义，那么就必须慎重考虑。 经过上述讨论， 我认为， 总结的来说， 非洲曾经提到过，最灵繁的人也看不见自己的背脊。这不禁令我深思。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 这一大段文章因何而发生？ 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 希腊在不经意间这样说过，最困难的事情就是认识自己。我希望诸位也能好好地体会这句话。 从这个角度来看， 这一大段文章，到底应该如何实现。\n可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 既然如何， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 一般来说， 一般来说， 莫扎特曾经提到过，谁和我一样用功，谁就会和我一样成功。这启发了我， 一般来讲，我们都必须务必慎重的考虑考虑。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 一般来讲，我们都必须务必慎重的考虑考虑。 这一大段文章因何而发生？ 经过上述讨论， 一般来说， 一般来讲，我们都必须务必慎重的考虑考虑。 亚伯拉罕·林肯曾经提到过，你活了多少岁不算什么，重要的是你是如何度过这些岁月的。带着这句话，我们还要更加慎重的审视这个问题： 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 从这个角度来看， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 要想清楚，这一大段文章，到底是一种怎么样的存在。 所谓这一大段文章，关键是这一大段文章需要如何写。 左拉说过一句富有哲理的话，生活的道路一旦选定，就要勇敢地走到底，决不回头。这启发了我， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 一般来讲，我们都必须务必慎重的考虑考虑。 我认为， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。\n而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下这一大段文章。 每个人都不得不面对这些问题。 在面对这种问题时， 所谓这一大段文章，关键是这一大段文章需要如何写。 总结的来说， 这一大段文章，发生了会如何，不发生又会如何。 别林斯基说过一句富有哲理的话，好的书籍是最贵重的珍宝。我希望诸位也能好好地体会这句话。 每个人都不得不面对这些问题。 在面对这种问题时， 贝多芬曾经提到过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。这启发了我， 从这个角度来看， 既然如此， 这一大段文章因何而发生？ 而这些并不是完全重要，更加重要的问题是， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 所谓这一大段文章，关键是这一大段文章需要如何写。 维龙曾经说过，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。这不禁令我深思。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 这一大段文章因何而发生？ 这一大段文章，到底应该如何实现。 这样看来， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 黑格尔说过一句富有哲理的话，只有永远躺在泥坑里的人，才不会再掉进坑里。这启发了我， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 笛卡儿在不经意间这样说过，读一切好书，就是和许多高尚的人谈话。我希望诸位也能好好地体会这句话。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 叔本华说过一句富有哲理的话，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。这句话语虽然很短，但令我浮想联翩。 这一大段文章，到底应该如何实现。 卡耐基曾经说过，一个不注意小事情的人，永远不会成就大事业。这似乎解答了我的疑惑。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 带着这些问题，我们来审视一下这一大段文章。 那么， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 既然如此， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 在这种困难的抉择下，本人思来想去，寝食难安。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 问题的关键究竟为何？ 既然如何， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 这一大段文章因何而发生。\n要想清楚，这一大段文章，到底是一种怎么样的存在。 一般来讲，我们都必须务必慎重的考虑考虑。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 别林斯基在不经意间这样说过，好的书籍是最贵重的珍宝。我希望诸位也能好好地体会这句话。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 每个人都不得不面对这些问题。 在面对这种问题时， 我们都知道，只要有意义，那么就必须慎重考虑。\n培根说过一句富有哲理的话，要知道对好事的称颂过于夸大，也会招来人们的反感轻蔑和嫉妒。这不禁令我深思。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 我认为， 要想清楚，这一大段文章，到底是一种怎么样的存在。 这一大段文章，到底应该如何实现。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 我认为， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 经过上述讨论， 在这种困难的抉择下，本人思来想去，寝食难安。 总结的来说， 我们不得不面对一个非常尴尬的事实，那就是， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 要想清楚，这一大段文章，到底是一种怎么样的存在。 我认为， 这一大段文章，发生了会如何，不发生又会如何。 在这种困难的抉择下，本人思来想去，寝食难安。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 俾斯麦曾经提到过，失败是坚忍的最后考验。这不禁令我深思。 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。\n总结的来说， 问题的关键究竟为何？ 我们都知道，只要有意义，那么就必须慎重考虑。 这样看来， 这一大段文章，到底应该如何实现。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 富勒曾经提到过，苦难磨炼一些人，也毁灭另一些人。这句话语虽然很短，但令我浮想联翩。 吕凯特曾经说过，生命不可能有两次，但许多人连一次也不善于度过。这句话语虽然很短，但令我浮想联翩。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 既然如此， 而这些并不是完全重要，更加重要的问题是， 培根曾经说过，深窥自己的心，而后发觉一切的奇迹在你自己。这句话语虽然很短，但令我浮想联翩。 每个人都不得不面对这些问题。 在面对这种问题时， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 既然如何， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 我们不得不面对一个非常尴尬的事实，那就是， 王阳明曾经说过，故立志者，为学之心也；为学者，立志之事也。这句话语虽然很短，但令我浮想联翩。 富兰克林说过一句富有哲理的话，你热爱生命吗？那么别浪费时间，因为时间是组成生命的材料。这句话语虽然很短，但令我浮想联翩。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 斯宾诺莎在不经意间这样说过，最大的骄傲于最大的自卑都表示心灵的最软弱无力。这不禁令我深思。 西班牙在不经意间这样说过，自知之明是最难得的知识。这不禁令我深思。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。\n带着这些问题，我们来审视一下这一大段文章。 那么， 王阳明曾经提到过，故立志者，为学之心也；为学者，立志之事也。我希望诸位也能好好地体会这句话。 每个人都不得不面对这些问题。 在面对这种问题时， 既然如此， 在这种困难的抉择下，本人思来想去，寝食难安。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 我们不得不面对一个非常尴尬的事实，那就是， 所谓这一大段文章，关键是这一大段文章需要如何写。 那么， 一般来讲，我们都必须务必慎重的考虑考虑。 经过上述讨论， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 那么， 总结的来说， 这一大段文章因何而发生？ 所谓这一大段文章，关键是这一大段文章需要如何写。 在这种困难的抉择下，本人思来想去，寝食难安。 吉格·金克拉曾经说过，如果你能做梦，你就能实现它。这句话语虽然很短，但令我浮想联翩。 我们不得不面对一个非常尴尬的事实，那就是。\n就我个人来说，这一大段文章对我的意义，不能不说非常重大。 问题的关键究竟为何？ 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这一大段文章，发生了会如何，不发生又会如何。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 所谓这一大段文章，关键是这一大段文章需要如何写。 德国在不经意间这样说过，只有在人群中间，才能认识自己。我希望诸位也能好好地体会这句话。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 总结的来说， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 所谓这一大段文章，关键是这一大段文章需要如何写。 歌德在不经意间这样说过，决定一个人的一生，以及整个命运的，只是一瞬之间。带着这句话，我们还要更加慎重的审视这个问题： 经过上述讨论。\n这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 既然如此， 笛卡儿在不经意间这样说过，我的努力求学没有得到别的好处，只不过是愈来愈发觉自己的无知。这启发了我， 孔子说过一句富有哲理的话，知之者不如好之者，好之者不如乐之者。我希望诸位也能好好地体会这句话。 这一大段文章，发生了会如何，不发生又会如何。 那么， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 在这种困难的抉择下，本人思来想去，寝食难安。 这一大段文章因何而发生？ 从这个角度来看， 带着这些问题，我们来审视一下这一大段文章。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 我们都知道，只要有意义，那么就必须慎重考虑。 经过上述讨论， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 这一大段文章，到底应该如何实现。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是， 那么， 一般来讲，我们都必须务必慎重的考虑考虑。 要想清楚，这一大段文章，到底是一种怎么样的存在。 所谓这一大段文章，关键是这一大段文章需要如何写。 既然如何， 在这种困难的抉择下，本人思来想去，寝食难安。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 吕凯特曾经说过，生命不可能有两次，但许多人连一次也不善于度过。这似乎解答了我的疑惑。 这样看来， 美华纳曾经说过，勿问成功的秘诀为何，且尽全力做你应该做的事吧。这似乎解答了我的疑惑。 我们不得不面对一个非常尴尬的事实，那就是， 问题的关键究竟为何？ 这一大段文章，到底应该如何实现。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 在这种困难的抉择下，本人思来想去，寝食难安。 我们都知道，只要有意义，那么就必须慎重考虑。 洛克曾经说过，学到很多东西的诀窍，就是一下子不要学很多。这启发了我， 既然如此， 所谓这一大段文章，关键是这一大段文章需要如何写。 冯学峰曾经说过，当一个人用工作去迎接光明，光明很快就会来照耀着他。这句话语虽然很短，但令我浮想联翩。 这一大段文章，发生了会如何，不发生又会如何。 博曾经说过，一次失败，只是证明我们成功的决心还够坚强。 维这启发了我， 我们都知道，只要有意义，那么就必须慎重考虑。 这一大段文章，到底应该如何实现。 我们不得不面对一个非常尴尬的事实，那就是， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 而这些并不是完全重要，更加重要的问题是， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 带着这些问题，我们来审视一下这一大段文章。 所谓这一大段文章，关键是这一大段文章需要如何写。 要想清楚，这一大段文章，到底是一种怎么样的存在。 要想清楚，这一大段文章，到底是一种怎么样的存在。 在这种困难的抉择下，本人思来想去，寝食难安。 我认为， 要想清楚，这一大段文章，到底是一种怎么样的存在。 带着这些问题，我们来审视一下这一大段文章。 问题的关键究竟为何？ 问题的关键究竟为何？ 这一大段文章，发生了会如何，不发生又会如何。 一般来说， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 经过上述讨论， 郭沫若曾经说过，形成天才的决定因素应该是勤奋。这句话语虽然很短，但令我浮想联翩。 这一大段文章，发生了会如何，不发生又会如何。\n就我个人来说，这一大段文章对我的意义，不能不说非常重大。 一般来说， 所谓这一大段文章，关键是这一大段文章需要如何写。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 那么， 我们都知道，只要有意义，那么就必须慎重考虑。 既然如何， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 要想清楚，这一大段文章，到底是一种怎么样的存在。 亚伯拉罕·林肯曾经提到过，我这个人走得很慢，但是我从不后退。这似乎解答了我的疑惑。 我们都知道，只要有意义，那么就必须慎重考虑。 这样看来， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我们不得不面对一个非常尴尬的事实，那就是， 带着这些问题，我们来审视一下这一大段文章。 所谓这一大段文章，关键是这一大段文章需要如何写。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 这样看来， 而这些并不是完全重要，更加重要的问题是， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 我认为， 既然如何， 布尔沃曾经说过，要掌握书，莫被书掌握；要为生而读，莫为读而生。带着这句话，我们还要更加慎重的审视这个问题： 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 那么， 那么， 我们不得不面对一个非常尴尬的事实，那就是， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 日本谚语曾经说过，不幸可能成为通向幸福的桥梁。带着这句话，我们还要更加慎重的审视这个问题： 邓拓曾经提到过，越是没有本领的就越加自命不凡。这不禁令我深思。 既然如何， 一般来说， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 从这个角度来看， 在这种困难的抉择下，本人思来想去，寝食难安。 既然如何， 这一大段文章因何而发生？ 莎士比亚说过一句富有哲理的话，人的一生是短的，但如果卑劣地过这一生，就太长了。我希望诸位也能好好地体会这句话。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 既然如此， 史美尔斯在不经意间这样说过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。带着这句话，我们还要更加慎重的审视这个问题： 维龙在不经意间这样说过，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。这不禁令我深思。 这样看来， 非洲曾经提到过，最灵繁的人也看不见自己的背脊。这启发了我。\n我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这样看来， 经过上述讨论， 富勒曾经说过，苦难磨炼一些人，也毁灭另一些人。这句话语虽然很短，但令我浮想联翩。 那么， 池田大作曾经说过，不要回避苦恼和困难，挺起身来向它挑战，进而克服它。这启发了我， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 培根曾经说过，阅读使人充实，会谈使人敏捷，写作使人精确。带着这句话，我们还要更加慎重的审视这个问题： 总结的来说。\n笛卡儿曾经提到过，阅读一切好书如同和过去最杰出的人谈话。这似乎解答了我的疑惑。 在这种困难的抉择下，本人思来想去，寝食难安。\n","categories":["Example"],"tags":["long"]},{"title":"图表示例","url":"//mermaid/","content":"\n\n\n主题通过 mermaid-js（GitHub）绘制各种图表。\n支持：\n\n流程图\n序列图\n类图\n状态图\n实体关系图\n用户旅程图\n甘特图\n指令图\n饼图\n\n\n关于写作那些事之快速上手 Mermaid 流程图\n\n流程图\n\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n\n\n&lt;div class=&quot;mermaid&quot;&gt;graph LR    A[Hard edge] --&gt;|Link text| B(Round edge)    B --&gt; C&#123;Decision&#125;    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]&lt;/div&gt;\n\n序列图\n\nsequenceDiagram\n    autonumber\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n\n\n&lt;div class=&quot;mermaid&quot;&gt;sequenceDiagram    autonumber    Alice-&gt;&gt;John: Hello John, how are you?    loop Healthcheck        John-&gt;&gt;John: Fight against hypochondria    end    Note right of John: Rational thoughts!    John--&gt;&gt;Alice: Great!    John-&gt;&gt;Bob: How about you?    Bob--&gt;&gt;John: Jolly good!&lt;/div&gt;\n\n类图\n\nclassDiagram\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)\n\n\n&lt;div class=&quot;mermaid&quot;&gt;classDiagramclassA --|&gt; classB : InheritanceclassC --* classD : CompositionclassE --o classF : AggregationclassG --&gt; classH : AssociationclassI -- classJ : Link(Solid)classK ..&gt; classL : DependencyclassM ..|&gt; classN : RealizationclassO .. classP : Link(Dashed)&lt;/div&gt;\n\n状态图\n\n    stateDiagram-v2\n        State1: The state with a note\n        note right of State1\n            Important information! You can write\n            notes.\n        end note\n        State1 --> State2\n        note left of State2 : This is the note to the left.\n\n\n&lt;div class=&quot;mermaid&quot;&gt;    stateDiagram-v2        State1: The state with a note        note right of State1            Important information! You can write            notes.        end note        State1 --&gt; State2        note left of State2 : This is the note to the left.&lt;/div&gt;\n\n实体关系图\n\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n\n\n&lt;div class=&quot;mermaid&quot;&gt;erDiagram    CUSTOMER ||--o&#123; ORDER : places    ORDER ||--|&#123; LINE-ITEM : contains    CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses&lt;/div&gt;\n\n用户旅程图\n\njourney\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me\n\n\n&lt;div class=&quot;mermaid&quot;&gt;journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 5: Me&lt;/div&gt;\n\n甘特图\n\ngantt\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :after a1  , 20d\n    section Another\n    Task in sec      :2014-01-12  , 12d\n    another task      : 24d\n\n\ngantt    title A Gantt Diagram    dateFormat  YYYY-MM-DD    section Section    A task           :a1, 2014-01-01, 30d    Another task     :after a1  , 20d    section Another    Task in sec      :2014-01-12  , 12d    another task      : 24d&lt;/div&gt;\n\n指令图\n\n%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%\nsequenceDiagram\n%%{config: { 'fontFamily': 'Menlo', 'fontSize': 18, 'fontWeight': 400} }%%\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice\n\n\n&lt;div class=&quot;mermaid&quot;&gt;%%&#123;init: &#123; &#x27;logLevel&#x27;: &#x27;debug&#x27;, &#x27;theme&#x27;: &#x27;dark&#x27; &#125; &#125;%%sequenceDiagram%%&#123;config: &#123; &#x27;fontFamily&#x27;: &#x27;Menlo&#x27;, &#x27;fontSize&#x27;: 18, &#x27;fontWeight&#x27;: 400&#125; &#125;%%Alice-&gt;&gt;Bob: Hi BobBob-&gt;&gt;Alice: Hi Alice&lt;/div&gt;\n\n饼图\n\npie\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n\n\n&lt;div class=&quot;mermaid&quot;&gt;pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5&lt;/div&gt;","categories":["Example"],"tags":["code"]},{"title":"[活动预告]主题曲【破碎日冕】开放，纪念活动开启","url":"//news/","content":"\n\n\n一、全新活动SideStory「绿野幻梦」，活动关卡开启活动说明： 活动期间将开放「绿野幻梦」活动关卡，玩家可通过活动关卡作战、完成相关活动任务以及活动商店兑换获取相关活动奖励\n解锁条件： 通关主线1-10\n活动关卡将进行分段式开启：\n◆“实验基地”开启时间： 07月05日 16:00 - 07月19日 03:59\n◆“莱茵总部”开启时间： 07月12日 16:00 - 07月19日 03:59\n\n【数据采集】\n活动说明： 活动期间，玩家可通过活动关卡作战完成“数据采集”中相关任务获取奖励\n主要奖励： 活动干员 【★★★★★：星源】 、 【莱茵实验培养舱】家具（部分） 、 神秘试剂\n【危险物品回收处】\n开放时间： 07月05日 16:00 - 07月26日 03:59\n兑换说明： 活动期间，玩家可通过挑战活动关卡及【数据采集】获取「神秘试剂」，消耗「神秘试剂」来兑换【危险物品回收处】中物品\n主要物品： 【星源】信物 、 【莱茵实验培养舱】家具（部分） 、寻访凭证、高级养成素材、龙门币、作战记录、家具零件等\n◆本次活动期间【情报处理室】将无法浏览当期活动剧情，活动结束后该活动剧情将收录至【情报处理室】中 \n\n二、【沙洲引路人】限时寻访开启活动时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间【沙洲引路人】限时寻访开启，该寻访中以下干员出现率上升\n★★★★★★：多萝西（占6★出率的50%）\n★★★★★：承曦格雷伊 &#x2F; 白面鸮（占5★出率的50%）\n注意： 本次活动【沙洲引路人】寻访为【标准寻访】\n\n三、新干员登场，信赖获取提升新增干员：\n★★★★★★：多萝西\n★★★★★：承曦格雷伊\n★★★★★：星源\n注意：\n◆新增干员【星源】仅在本次「绿野幻梦」活动中获取。暂不加入【沙洲引路人】及任何【标准寻访】\n◆新增干员【多萝西】、【承曦格雷伊】除加入【沙洲引路人】寻访外，将在07月07日04:00后加入并常驻其余【标准寻访】卡池\n◆本次活动关卡内以上新增干员信赖获取提升\n\n四、【珊瑚海岸】系列，新装限时上架贩售时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间以下干员新增时装将在时装商店上架并进行限时贩售\n◆珊瑚海岸系列 - “灿阳朝露 SD08” - 卡涅利安\n◆珊瑚海岸系列 - “悠然假日 HDm04” - 炎客\n◆珊瑚海岸系列 - “夏卉 FA641” - 夜半\n\n五、【时代】系列，复刻时装限时上架贩售时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间以下干员时装将在时装商店复刻上架并进行限时贩售\n◆时代系列 - “白沙” - 蜜蜡\n◆时代系列 - “伦式巫女” - 月禾\n◆时代系列 - “闲适午后” - 调香师\n\n六、新增【莱茵实验培养舱】主题家具，限时获取活动说明： 活动期间新增活动限定家具【莱茵实验培养舱】系列\n** 获取方式：**\n◆SideStory「绿野幻梦」活动奖励及兑换（部分）\n◆家具商店限时售卖（部分）：07月05日 16:00 - 07月19日 03:59\n\n七、芯片礼包限时上架售卖时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间，采购中心将限时售卖以下组合包\n[沙洲引路人芯片礼包]\n组合包内容：特种芯片组*8、特种芯片*5、龙门币*210000\n\n八、剿灭作战关卡【盘桓蜀道】追加开启时间： 07月11日 04:00 - 09月05日 03:59\n开启条件： 所有通关主线2-8的玩家\n关卡说明： 新增剿灭委托关卡【盘桓蜀道】将替换现有剿灭委托关卡【黑夜锦标秀】，现剿灭委托关卡【黑夜锦标秀】将在关闭后收录进假定作战目标\n更多活动内容请持续关注《明日方舟》游戏内公告及官方公告。\n【明日方舟】运营组2022年06月29日\n","categories":["活动"],"tags":["Arknights"]},{"title":"Markdown 教程","url":"/2020/04/15/markdown/","content":"\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。\n\n\n\n标题👆 看起来就像上面这个。Markdown 标题有两种格式。\n使用 = 和 - 标记一级和二级标题= 和 - 标记语法格式如下：\n我展示的是一级标题=================我展示的是二级标题-----------------\n\n使用 # 号标记使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n段落样式Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n字体Markdown 可以使用以下几种字体：\n\n斜体文本粗体文本粗斜体文本\n\n*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___\n\n分隔线可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n\n我\n\n裂\n\n开\n\n了\n\n\n**** * ******- - -----------\n\n删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\nRUNOOB.COMGOOGLE.COMBAIDU.COM\n\nRUNOOB.COMGOOGLE.COM~~BAIDU.COM~~\n\n下划线下划线可以通过 HTML 的 &lt;u&gt; 标签来实现：\n\n带下划线文本\n\n&lt;u&gt;带下划线文本&lt;/u&gt;\n\n脚注脚注是对文本的补充说明。Markdown 脚注的格式如下:\n[^要注明的文本]\n以下实例演示了脚注的用法：\n\n阿米娅^阿米娅\n\n创建脚注格式类似这样 [^阿米娅][^阿米娅]: 博士，您还有很多事情需要处理。现在还不能休息哦。\n\nMarkdown 列表Markdown 支持有序列表和无序列表。无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：\n\n\n第一项\n第二项\n第三项\n\n\n* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项\n有序列表使用数字并加上 . 号来表示，如：\n\n\n第一项\n第二项\n第三项\n\n\n1. 第一项2. 第二项3. 第三项\n\n列表嵌套列表嵌套只需在子列表中的选项添加四个空格即可：\n\n第一项：\n第一项嵌套的第一个元素\n第一项嵌套的第二个元素\n\n\n第二项：\n第二项嵌套的第一个元素\n第二项嵌套的第二个元素\n\n\n\n1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素\n\nMarkdown 区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：\n\n这是一个区块\n\n&gt; 这是一个区块\n另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：\n\n最外层\n\n第一层嵌套\n\n第二层嵌套\n\n\n\n&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套\n\n区块中使用列表区块中使用列表实例如下：\n\n区块中使用列表\n\n第一项\n第二项\n\n\n第一项\n第二项\n第三项\n\n\n&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项\n\n列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。区块中使用列表实例如下：\n\n第一项\n菜鸟教程学的不仅是技术更是梦想\n\n\n第二项* 第一项    &gt; 菜鸟教程    &gt; 学的不仅是技术更是梦想* 第二项\n\nMarkdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：printf() 函数\n`printf()` 函数\n代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：实例如下：\n$(document).ready(function () {    alert('RUNOOB');});\n\nMarkdown 链接链接使用方法如下：\n\n链接名称或者直接使用链接地址https://github.com/Yue-plus\n\n[链接名称](链接地址)&lt;https://github.com/Yue-plus&gt;\n\n高级链接可以通过变量来设置一个链接，变量赋值在文档末尾进行：\n\n这个链接用 1 作为网址变量 Google这个链接用 mysite 作为网址变量 Yue_plus\n\n这个链接用 1 作为网址变量 [Google][1]这个链接用 mysite 作为网址变量 [Yue_plus][mysite]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [mysite]: https://github.com/Yue-plus\n\nMarkdown 图片Markdown 图片语法格式如下：\n![alt 属性文本](图片地址)![alt 属性文本](图片地址 \"可选标题\")\n开头一个感叹号 !接着一个方括号，里面放上图片的替代文字接着一个英文括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。\n\n\n\n![罗德岛集结](https://ak.hypergryph.com/upload/images/20190228/118078295785f64dac736c6ade50bb76.jpg \"罗德岛集结\")\n当然，你也可以像网址那样对图片网址使用变量:\n这个链接用 `2` 作为网址变量 [凯尔希][2].然后在文档的结尾为变量赋值（网址）[2]: https://ak.hypergryph.com/upload/images/20190228/143666074a406ecaa6cd4271dc7c5127.jpg\nMarkdown 还没有办法指定图片的高度与宽度，如果需要的话，也可以使用普通的 &lt;img&gt; 标签。\n\n\n&lt;img src=\"https://ak.hypergryph.com/assets/index/images/ak/common/story/item_infected.png\" width=\"200px\"&gt;\n\nMarkdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。语法格式如下：\n\n\n\n表头\n表头\n\n\n\n单元格\n单元格\n\n\n单元格\n单元格\n\n\n|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |\n\n可以设置表格的对齐方式：\n-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。\n\n\n\n左对齐\n右对齐\n居中对齐\n\n\n\n单元格\n单元格\n单元格\n\n\n单元格\n单元格\n单元格\n\n\nMarkdown 高级技巧##支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等，如：\n\n使用 Ctrl+Alt+Del 重启电脑\n\n使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑\n\n转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n\n** 正常显示星号 **\n\n**文本加粗** \\*\\* 正常显示星号 \\*\\*\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号\n\n数学公式当需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n参考 使用 hexo-filter-mathjax 过滤器来显示数学公式\n\n\n可以在行内包含数学公式：  注意单 $ 内部不能有空格！\n\n可以在行内包含数学公式： $i\\hbar\\frac{\\partial}{\\partial t}\\psi=-\\frac{\\hbar^2}{2m}\\nabla^2\\psi+V\\psi$ 注意单 `$` 内部不能有空格！$$\\begin{eqnarray\\*}\\nabla\\cdot\\vec{E}&amp;=&amp;\\frac{\\rho}{\\epsilon_0}\\\\\\\\\\nabla\\cdot\\vec{B}&amp;=&amp;0\\\\\\\\\\nabla\\times\\vec{E}&amp;=&amp;-\\frac{\\partial B}{\\partial t}\\\\\\\\\\nabla\\times\\vec{B}&amp;=&amp;\\mu_0\\left(\\vec{J}+\\epsilon_0\\frac{\\partial E}{\\partial t}\\right)\\\\\\\\\\end{eqnarray\\*}$$\n\n","categories":["教程"],"tags":["Markdown"]},{"title":"ロドス・アイランド","url":"/2020/04/19/nihonngo/","content":"表向きは製薬会社であり、正式名称は「ロドス・アイランド製薬」という。しかし、その実体は感染者自身の手で感染者問題の解決に取り組む専門組織であり、様々な手段を用いて感染者が巻き起こす事件を解決に導いてきた実績を持つ。前代未聞の暴動が各地で巻き起こる中、新たにロドスに加わったドクターの決断が、ロドスの未来を決めることになるだろう。\n\n"},{"title":"Monaco Editor 示例","url":"//monaco-editor/","content":"Monaco Editor除了 Hexo 自带的 代码块 外，本主题还支持 VS Code 风格的 Monaco Editor。\n\n&#123;% editor javascript %&#125;/* global hexo */&#x27;use strict&#x27;;function render(data) &#123;    return hexo.render.renderSync(&#123; text: data, engine: &#x27;markdown&#x27; &#125;);&#125;hexo.extend.tag.register(&#x27;hide&#x27;, (args) =&gt; &#123;    let content = &#x27;&#x27;    args.forEach((item) =&gt; &#123;        content += &#x27; &#x27; + item    &#125;);    return `&lt;span class=&quot;hide&quot;&gt;&lt;object&gt;$&#123;render(content.slice(1)).trim()&#125;&lt;/object&gt;&lt;/span&gt;`;&#125;)&#123;% endeditor %&#125;\n\n/* global hexo */\n\n&#39;use strict&#39;;\n\nfunction render(data) {\n    return hexo.render.renderSync({ text: data, engine: &#39;markdown&#39; });\n}\n\nhexo.extend.tag.register(&#39;hide&#39;, (args) =&gt; {\n    let content = &#39;&#39;\n    args.forEach((item) =&gt; {\n        content += &#39; &#39; + item\n    });\n    return `&lt;span class=&quot;hide&quot;&gt;&lt;object&gt;${render(content.slice(1)).trim()}&lt;/object&gt;&lt;/span&gt;`;\n})\n\neditor 标签支持以下参数：\n[language, [theme, [readOnly, [height]]], [...extras(key:value)]]\n\n\nlanguage 默认为 plaintext；\ntheme 默认为 vs-dark；\nreadOnly 默认为 true；\nheight 默认为 300px。\n\n较少使用的参数可通过 extras 项传入。例如，下面示例在超过 40 列时启用折行：\n&#123;% editor javascript hc-black wordWrap:`wordWrapColumn` wordWrapColumn:40 wrappingIndent:`indent` %&#125;/* global hexo */&#x27;use strict&#x27;;function render(data) &#123;    return hexo.render.renderSync(&#123; text: data, engine: &#x27;markdown&#x27; &#125;);&#125;hexo.extend.tag.register(&#x27;hide&#x27;, (args) =&gt; &#123;    let content = &#x27;&#x27;    args.forEach((item) =&gt; &#123;        content += &#x27; &#x27; + item    &#125;);    return `&lt;span class=&quot;hide&quot;&gt;&lt;object&gt;$&#123;render(content.slice(1)).trim()&#125;&lt;/object&gt;&lt;/span&gt;`;&#125;)&#123;% endeditor %&#125;\n\n更多扩展参数请参阅 Monaco Editor 文档；具体样式效果见 PR #215。\n","categories":["Example"],"tags":["code"]},{"title":"Unix 时间","url":"/1970/01/01/unixtime/","content":"UNIX时间，或称POSIX时间是UNIX或类UNIX系统使用的时间表示方式：从UTC1970年1月1日0时0分0秒起至现在的总秒数，不考虑闰秒。在多数Unix系统上Unix时间可以透过date +%s指令来检查。\n\n"}]