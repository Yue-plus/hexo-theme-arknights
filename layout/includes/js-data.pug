script(defer src=url_for("js/arknights.js"))

if searchConfig !== null
  script(defer src=url_for("js/search.js"))

if theme.vercount && theme.vercount.enable === true
  script(defer src="https://vercount.one/js")

if theme.valine && theme.valine.enable === true
  script(async src='//unpkg.com/valine/dist/Valine.min.js')

if theme.gitalk && theme.gitalk.enable === true
  script(async src=url_for("js/gitalk.js"))

if theme.mermaid && theme.mermaid.enable === true && theme.mermaid.version
  script(defer type='module').
    import mermaid from '#{"//unpkg.com/mermaid@" + theme.mermaid.version + "/dist/mermaid.esm.mjs"}';
    window.mermaid = mermaid;
    code.paintMermaid();

if theme.waline && theme.waline.enable === true
  script(async type='module').
    import { init } from '//unpkg.com/@waline/client@v2/dist/waline.mjs';
    window.waline = init;

if theme.mathjax && theme.mathjax.enable === true
  script(src="//cdnjs.cloudflare.com/ajax/libs/mathjax/" + theme.mathjax.version + "/MathJax.js")
  script.
    MathJax.Hub.Config({
      menuSettings: {
        zoom: "None"
      },
      showMathMenu: false,
      jax: ["input/TeX","output/CommonHTML"],
      extensions: ["tex2jax.js"],
      TeX: {
        extensions: ["AMSmath.js","AMSsymbols.js"],
        equationNumbers: {
          autoNumber: "AMS"
        }
      },
      tex2jax: {
        inlineMath: [["\\(", "\\)"]],
        displayMath: [["\\[", "\\]"]]
      }
    });

script(async src="//unpkg.com/lightgallery@2.7.1/lightgallery.min.js")
script(async src="//unpkg.com/lightgallery@2.7.1/plugins/zoom/lg-zoom.min.js")
script(async src="//unpkg.com/lightgallery@2.7.1/plugins/thumbnail/lg-thumbnail.min.js")
script(async src=url_for("/lib/encrypt/hbe.js"))
include ./pjax.pug
script.pjax-js reset= () => {
  if theme.valine && theme.valine.enable === true
    |new Valine({
    |  el: '#valine'
    |  , appId: '#{theme.valine.app_id}'
    |  , appKey: '#{theme.valine.app_key}'
    if theme.valine.server_url
      | , serverURLs: '#{theme.valine.server_url}'
    |  , placeholder: '#{__('valine.placeHolder')}'
    |  , path: !{'window.location.pathname'}
    |  , avatar: '#{theme.valine.avatar}'
    |  , avatar_cdn: '#{theme.valine.avatar_cdn}'
    |});
  if theme.artalk && theme.artalk.enable === true
    |Artalk.init({
    |  el: '#artalk',
    |  server: '#{theme.artalk.server}',
    if theme.color === "dark" || theme.color === "dark-only"
      |  darkMode: 'true',
    else if theme.color === "auto"
      |  darkMode: 'auto',
    if theme.artalk.site_name
      |  site: '#{theme.artalk.site_name}',
    |});
  if theme.gitalk && theme.gitalk.enable === true
    - let config = theme.gitalk, gitAdmin = ''
    for str in theme.gitalk.admin
      - gitAdmin= gitAdmin + "'" + str + "'"
    |gitalk = new Gitalk({
    |  clientID: '#{config.client_id}',
    |  clientSecret: '#{config.client_secret}',
    |  repo: '#{config.repo}',
    |  owner: '#{config.owner}',
    |  admin: [#{gitAdmin}],
    |  distractionFreeMode: #{config.distraction_free_mode || false},
    |  id: #{config.id ? config.id : ""}
    |});
    |if (document.querySelector("#gitalk")) gitalk.render("gitalk");
  if theme.waline && theme.waline.enable === true
    |if (document.querySelector('#waline'))
    |  waline({
    |    el: '#waline',
    |    dark: ':root[theme-mode="dark"]',
    |    serverURL: '#{theme.waline.server_url}',
    |    path: !{'window.location.pathname'},
    |  });
  if theme.utterances && theme.utterances.enable === true
    |if (document.querySelector('#utterances')) {
    |  const container = document.querySelector('#utterances');
    |  container.innerHTML = '';
    |  const script = document.createElement('script');
    |  script.src = 'https://utteranc.es/client.js';
    |  script.setAttribute('repo', '#{theme.utterances.repo}');
    |  script.setAttribute('issue-term', '#{theme.utterances.issue_term}');
    |  script.setAttribute('theme', '#{theme.utterances.theme}');
    |  script.setAttribute('crossorigin', 'anonymous');
    |  script.async = true;
    |  container.appendChild(script);
    |}
  if theme.giscus && theme.giscus.enable === true
    |window.giscusSettings = {
    |  repo: '#{theme.giscus.repo}',
    |  repoId: '#{theme.giscus.repo_id}',
    |  category: '#{theme.giscus.category}',
    |  categoryId: '#{theme.giscus.category_id}',
    |  mapping: '#{theme.giscus.mapping}',
    |  strict: '#{theme.giscus.strict}',
    |  reactionsEnabled: '#{theme.giscus.reactions_enabled}',
    |  emitMetadata: '#{theme.giscus.emit_metadata}',
    |  inputPosition: '#{theme.giscus.input_position}',
    |  lang: '#{theme.giscus.lang}',
    |  crossorigin: '#{theme.giscus.crossorigin || "anonymous"}'
    if theme.giscus.term
      |  , term: '#{theme.giscus.term}'
    if theme.giscus.discussion_number
      |  , discussionNumber: '#{theme.giscus.discussion_number}'
    if theme.giscus.description
      |  , description: '#{theme.giscus.description}'
    if theme.giscus.origin
      |  , origin: '#{theme.giscus.origin}'
    if theme.giscus.loading
      |  , loading: '#{theme.giscus.loading}'
    |};
    if theme.giscus.theme_light && theme.giscus.theme_dark
      |window.giscusThemeConfig = { light: '#{theme.giscus.theme_light}', dark: '#{theme.giscus.theme_dark}' };
    else if theme.giscus.theme
      |window.giscusThemeConfig = { theme: '#{theme.giscus.theme}' };
  if theme.mathjax && theme.mathjax.enable === true
    |MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
  | document.querySelector('.lg-container')?.remove()
  | const postBg = document.querySelector('#post-bg');
  | if (postBg) lightGallery(postBg, {
  |   plugins: [lgZoom,lgThumbnail],
  |   selector: '.item-img'})}

script window.addEventListener("load",() => {
  if pjax
    |pjax = new Pjax({
    |  cacheBust: false,
    |  selectors: ['title','article','#aside-block','.pjax-js','data-pjax','.vercount','meta[name=page-config]'],
    |  switches: {'article': Pjax.switches.sideBySide},
    |  switchesOptions: {
    |    'article': {
    |      classNames: {
    |        remove: "pjax-out",
    |        add: "pjax-in"
    |      }
    |    }
    |  }
    |});
    |document.addEventListener("pjax:complete", reset);
    if theme.vercount.enable
      |document.addEventListener('pjax:success', _ => {
      |  const script = document.createElement('script');
      |  script.src = 'https://vercount.one/js';
      |  document.head.appendChild(script);
      |});
  | reset()})
