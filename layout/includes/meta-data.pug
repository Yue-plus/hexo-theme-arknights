meta(charset='UTF-8')
meta(name='viewport' content='width=device-width, initial-scale=1.0')
title= pageTitle

link(
  rel="icon"
  type=(theme.favicon.type ? theme.favicon.type : "image/x-icon")
  href=(url_for(theme.favicon.href ? theme.favicon.href : "favicon.ico"))
)

link(rel="preload", as="font", crossorigin="anonymous", href=url_for("font/Bender.ttf"))
link(rel="preload", as="font", crossorigin="anonymous", href=url_for("font/BenderLight.woff2"))
link(rel="preload", as="font", crossorigin="anonymous", href=url_for('font/JetBrainsMono-Regular.woff2'))
style.
  @font-face {
    font-family: Bender;
    src: url("#{config.root}font/Bender.ttf");
  }
  @font-face {
    font-family: BenderLight;
    src: url("#{config.root}font/BenderLight.woff2");
  }
  @font-face {
    font-family: 'JetBrains Mono';
    src: url('#{config.root}font/JetBrainsMono-Regular.woff2');
  }
link(rel="stylesheet", href=url_for("css/arknights.css"))

meta(name="page-config" content=JSON.stringify({ code_fold: page.code_fold || null }))

if theme.giscus && theme.giscus.enable === true && theme.giscus.backlink
  meta(name="giscus:backlink" content=theme.giscus.backlink)

script(class="pjax-js").
  var config = !{configs};
  var page_config = {
    code_fold: !{JSON.stringify(page.code_fold || null)}
  };
  function updatePageConfig() {
    var newPageConfig = document.querySelector('meta[name="page-config"]');
    if (newPageConfig) {
      page_config = JSON.parse(newPageConfig.content);
    }
  }
  document.addEventListener('pjax:complete', function() { updatePageConfig(); });
  updatePageConfig();
if theme.waline && theme.waline.enable === true
  link(rel="stylesheet", href= url_for('//unpkg.com/@waline/client@v2/dist/waline.css'))
link(type="text/css" rel="stylesheet" href=url_for("/lib/encrypt/hbe.style.css"))
if theme.gitalk && theme.gitalk.enable === true
  script(src=url_for("js/gitalk.js"))
if theme.artalk && theme.artalk.enable === true
  link(type="text/css" rel="stylesheet" href="//unpkg.com/artalk@2.8.4/dist/Artalk.css")
  script(async src="//unpkg.com/artalk@2.8.4/dist/Artalk.js")
if theme.mermaid && theme.mermaid.enable === true && theme.mermaid.version
  script(src= "//unpkg.com/mermaid@" + theme.mermaid.version + "/dist/mermaid.min.js")
if theme.mathjax && theme.mathjax.enable === true
  script(src="//cdnjs.cloudflare.com/ajax/libs/mathjax/" + theme.mathjax.version + "/MathJax.js")
  script
    |MathJax.Hub.Config({
    |  menuSettings: {
    |    zoom: "None"
    |  },
    |  showMathMenu: false,
    |  jax: ["input/TeX","output/CommonHTML"],
    |  extensions: ["tex2jax.js"],
    |  TeX: {
    |    extensions: ["AMSmath.js","AMSsymbols.js"],
    |    equationNumbers: {
    |      autoNumber: "AMS"
    |    }
    |  },
    |  tex2jax: {
    |    inlineMath: [["\\(", "\\)"]],
    |    displayMath: [["\\[", "\\]"]]
    |  }
    |});
link(type="text/css" rel="stylesheet" href="//unpkg.com/lightgallery@2.7.1/css/lightgallery.css")
link(type="text/css" rel="stylesheet" href="//unpkg.com/lightgallery@2.7.1/css/lg-zoom.css")
link(type="text/css" rel="stylesheet" href="//unpkg.com/lightgallery@2.7.1/css/lg-thumbnail.css")
link(type="text/css" rel="stylesheet" href=url_for("/lib/fontawesome/css/all.min.css"))


if theme.stylesheets && theme.stylesheets.length > 0
  //- stylesheets list from _config.yml
  each url in theme.stylesheets
    if url
      if url[0] === '{' && url[url.length - 1] === '}'
        style!=url.substr(1, url.length - 2)
      else
        style(defer src=url)
    link(rel='stylesheet', href=url)
script
  |if (window.localStorage.getItem('theme-mode') === 'light'
  if theme.color === 'auto'
    |  || window.matchMedia('(prefers-color-scheme:light)').matches
  |)
  |  document.documentElement.setAttribute('theme-mode', 'light')
  |if (window.localStorage.getItem('theme-mode') === 'dark'
  if theme.color === 'auto'
    |  || window.matchMedia('(prefers-color-scheme:dark)').matches
  |)
  |  document.documentElement.setAttribute('theme-mode', 'dark')
style
  |@font-face {
  |  font-family: BenderLight;
  |  src: local('Bender'), url("#{config.root}font/BenderLight.woff2") format('woff2');
  |}
  |@font-face {
  |  font-family: 'JetBrains Mono';
  |  src: local('JetBrains Mono'), url('#{config.root}font/JetBrainsMono-Regular.woff2') format('woff2');
  |}

include ./generate-css.pug
include ./js-data.pug
